import graphlab as _gl
import logging as _logging
from graphlab.connect import _get_metric_tracker

_log = _logging.getLogger(__name__)


def create(function, parameter_set):
    '''
    Create a DML job.

    For now, we leverage map_job infrastructure for DML job. The difference is
    indicated through _job_type parameter.

    Parameters
    ----------
    function : function
        Function to be executed, with arguments to pass to this
        function specified by parameter_set.

    parameter_set : iterable of dict
        Each element of the list corresponds to an evaluation of the function
        with the dictionary argument.

    '''
    environment = _gl._distributed_execution_environment.get_distributed_execution_environment()
    if environment is None:
        raise RuntimeError('Please use graphlab.set_distributed_execution_environment() to set distributed execution environment first.')

    if len(parameter_set) > environment.get_num_workers():
        raise RuntimeError('Length of parameter_set cannot not exceed %d' % environment.get_num_workers())

    _get_metric_tracker().track('jobs.dml_job')

    job = _gl.deploy.map_job._create_map_job(
            function, parameter_set = parameter_set, environment = environment, _job_type = 'DML')

    # submit to DMLExecutionEngine directly
    return environment.run_job(job)
