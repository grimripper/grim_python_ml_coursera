'''
Copyright (C) 2015 Dato, Inc.
All rights reserved.

This software may be modified and distributed under the terms
of the BSD license. See the DATO-PYTHON-LICENSE file for details.
'''
from graphlab.util.config import DEFAULT_CONFIG as _DEFAULT_CONFIG

import datetime as _datetime
import json as _json
import logging as _logging
import os as _os
import requests as _requests
import subprocess as _subprocess
import time as _time
import graphlab.sys_util as _sys_util

__LOGGER__ = _logging.getLogger(__name__)

__default_dato_endpoint = 'https://beta.graphlab.com'
__section = 'Product'
__key = 'product_key'
__license = 'license_info'
__default_config_path = _os.path.join(_os.path.expanduser("~"), ".graphlab", "config")

def get_product_key(file = __default_config_path):
    """
    Returns the product key found in file, which by default is ~/.graphlab/config
    or in environment variable GRAPHLAB_PRODUCT_KEY.

    Note: Environment variable takes precedence over config file.

    @param file optional parameter to specify which file to use for configuration (defaults to ~/.graphlab/config)
    @return Product key string, or None if not found.
    """
    PRODUCT_KEY_ENV = 'GRAPHLAB_PRODUCT_KEY'
    if not PRODUCT_KEY_ENV in _os.environ:
        import graphlab.connect as _mt
        # see if in ~/.graphlab/config
        if (_os.path.isfile(file)):
            try:
                import ConfigParser
                config = ConfigParser.ConfigParser()
                config.read(file)
                product_key = config.get(__section, __key)
                if product_key == -1:
                    raise BaseException() # will fall into except block below
                else:
                    # set the product key as an environment variable in this session
                    _os.environ[PRODUCT_KEY_ENV] = str(product_key).strip('"\'')
            except:
                msg = "License check failed: Unable to validate license. Contact support@dato.com."
                _mt._get_metric_tracker().track('get_product_key.config_parser_error')
                raise KeyError(msg)
        else:
            return None
    return _os.environ[PRODUCT_KEY_ENV]

def set_product_key(product_key, file=(_os.path.join(_os.path.expanduser("~"), ".graphlab", "config"))):
    """
    Sets the product key provided in file, which by default is ~/.graphlab/config
    Overwrites any existing product key in that file.

    Note: Environment variable GRAPHLAB_PRODUCT_KEY takes precedence over the
    config file and is not affected by this function.

    Parameters
    ----------
    product_key : str
        The product key, provided by registration on https://dato.com/register

    file : str, optional
        Specifies which file to use for configuration (defaults to ~/.graphlab/config)
    """
    import graphlab.connect as _mt
    try:
        import ConfigParser
        config = ConfigParser.ConfigParser()
        config.read(file)
        if not(config.has_section(__section)):
            config.add_section(__section)
        config.set(__section, __key, product_key)
        with open(file, 'wb') as config_file:
            config.write(config_file)
        _mt._get_metric_tracker().track('set_product_key.succeeded')
    except:
        _mt._get_metric_tracker().track('set_product_key.config_parser_error')
        __LOGGER__.warn('Unable to write GraphLab Create product key to %s. Ensure that this user account has write permission to %s to save the product key locally.' % (file, file))
        _os.environ['GRAPHLAB_PRODUCT_KEY'] = str(product_key)

def _get_license_info(config_path = __default_config_path):
    """
    Gets the license info from Dato's server. If unable to reach Dato's server, use local config file
    as fall back.

    @param config_path optional parameter to specify which file to use for configuration (defaults to ~/.graphlab/config)
    @return License info string, or None if not found.
    """

    import graphlab.connect as _mt
    # check dato.com for license info first (always prefer online license check)
    product_key = get_product_key(file=config_path)
    try:
        data = {'product_key': product_key}
        response = _requests.post(__default_dato_endpoint + '/license/check', data=_json.dumps(data), timeout=3, headers={'Content-Type':'application/json'})
        if response.status_code == 200:
            # write this in config file
            blob = response.content
            __set_license_info(product_key, blob)
            return blob
        elif response.status_code == 404:
            blob = _json.loads(response.content)
            if 'error' in blob:
                msg = blob['error']
                raise RuntimeError(msg)
    except _requests.exceptions.RequestException:
        _mt._get_metric_tracker().track('get_license_info.online_failed.')

    # 1st cache fallback, see if it is in the environment variable
    if 'GRAPHLAB_LICENSE_INFO' in _os.environ:
        return _os.environ['GRAPHLAB_LICENSE_INFO']

    # 2nd cache fallback, see if it is in ~/.graphlab/config
    if (_os.path.isfile(config_path)):
        import ConfigParser
        config = ConfigParser.ConfigParser()
        config.read(config_path)
        try:
            license_info = config.get(__section, __license)
            if license_info == -1:
                raise BaseException()
            return license_info
        except:
            msg = "License check failed: Unable to communicate with service. Verify " + \
                  "Internet connection and try again or contact support@dato.com."
            _mt._get_metric_tracker().track('get_license_info.config_parser_error')
            raise RuntimeError(msg)

    # online, offline-env, and offline-config all failed
    return None # error will be thrown from the unity server engine


def __set_license_info(product_key, license_info, config_path=(_os.path.join(_os.path.expanduser("~"), ".graphlab", "config"))):
    """
    Sets the license info provided in file, which by default is ~/.graphlab/config
    Overwrites any existing product key in that file.

    Parameters
    ----------
    license_info : str
        The license info returned from the Dato server.

    config_path : str, optional
        Specifies which file to use for configuration (defaults to ~/.graphlab/config)
    """
    import graphlab.connect as _mt
    try:
        import ConfigParser
        config = ConfigParser.ConfigParser()
        config.read(config_path)
        if not(config.has_section(__section)):
            config.add_section(__section)
        config.set(__section, __key, product_key)
        config.set(__section, __license, license_info)
        with open(config_path, 'wb') as config_file:
            config.write(config_file)
        _mt._get_metric_tracker().track('set_license_info.succeeded')
    except:
        _mt._get_metric_tracker().track('set_license_info.config_parser_error')
        __LOGGER__.warn('Unable to write current GraphLab Create license to %s. Ensure that this user account has write permission to %s to save the license for offline use.' % (config_path, config_path))
        _os.environ['GRAPHLAB_LICENSE_INFO'] = license_info

def _is_product_key_valid(product_key, license_info, config=_DEFAULT_CONFIG):
    """
    Validate the product key passed in by launching local server process.

    @param key to validate
    @return True if validates correctly, False otherwise

    Raises a RuntimeError if the unity_server binary cannot be executed.
    """

    import graphlab.connect as _mt
    now = int(_time.mktime(_datetime.datetime.utcnow().timetuple()))
    properties = {'timestamp': now}
    try:
        cmd = "\"%s\" --help" % (config.server_bin)
        import os
        nulldevice = open(os.devnull)
        _subprocess.check_call(cmd, stderr=nulldevice, stdout=nulldevice, env=_sys_util.make_unity_server_env(), shell=True)
    except:
        _mt._get_metric_tracker().track('is_product_key_valid.unity_server_error', properties=properties)
        raise RuntimeError("Cannot execute unity_server binary")

    # return false if there is no license_info
    if product_key is None or license_info is None:
        _mt._get_metric_tracker().track('is_product_key_valid.missing', properties=properties)
        return False

    try:
        cmd = "\"%s\" --check_product_key_only" % config.server_bin
        if product_key:
            cmd +=  " --product_key=%s" % product_key
        if license_info:
            cmd +=  " --license_info=%s" % license_info
        msg = _subprocess.check_output(cmd, stderr=_subprocess.STDOUT, env=_sys_util.make_unity_server_env(), shell=True)
        __LOGGER__.info(msg)
        _mt._get_metric_tracker().track('is_product_key_valid.succeeded', properties=properties)
        return True
    except _subprocess.CalledProcessError as e:
        __LOGGER__.error(e.output)
        _mt._get_metric_tracker().track('is_product_key_valid.failed', properties=properties)
    except Exception as e:
        __LOGGER__.debug(config)
        __LOGGER__.debug(e)
        _mt._get_metric_tracker().track('is_product_key_valid.unexpected_exception', properties=properties)

    return False
