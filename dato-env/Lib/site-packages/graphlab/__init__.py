"""
@package graphlab
...
GraphLab Create is a machine learning platform that enables data scientists and
app developers to easily create intelligent applications at scale. Building an
intelligent, predictive application involves iterating over multiple steps:
cleaning the data, developing features, training a model, and creating and
maintaining a predictive service. GraphLab Create does all of this in one
platform. It is easy to use, fast, and powerful.

For more details on the GraphLab Create see http://dato.com, including
documentation, tutorial, etc.
"""

'''
Copyright (C) 2015 Dato, Inc.
All rights reserved.

This software may be modified and distributed under the terms
of the BSD license. See the DATO-PYTHON-LICENSE file for details.
'''

# ---------------------------------------------------------------------------
# THIS IS AN OSS OVERRIDE FILE
#
# What this means is that there is a corresponding file in the OSS directory,
# and this file overrides that. Be careful when making changes.
# Specifically, do log the differences here.
#
# - OSS does not have all the toolkits and canvas
# - OSS does not have aws
# - OSS does not have gl_numpy
# ---------------------------------------------------------------------------


# There are 2 modes of numpy injection. The intrusive method and the
# non-intrusive method. The non-intrusive method requires a special build of
# numpy and must be called BEFORE numpy is imported. The intrusive method
# should work with all numpy (probably) but only works AFTER numpy is imported.
#
# So on load of graphlab, we first try the non-intrusive method.
# Then when gl.numpy is imported we try the intrusive method
try:
    import graphlab.numpy_loader as _numpy_loader
    _numpy_loader.activate_scalable_numpy(False)
    if _numpy_loader.numpy_activation_successful():
        print "Scalable Numpy Activation Successful"
except:
    pass

from graphlab.util import get_runtime_config
from graphlab.util import set_runtime_config

import graphlab.connect as _mt
import graphlab.connect.aws as aws
import visualization

from graphlab.data_structures.sgraph import Vertex, Edge
from graphlab.data_structures.sgraph import SGraph
from graphlab.data_structures.sarray import SArray
from graphlab.data_structures.sframe import SFrame
from graphlab.data_structures.sketch import Sketch
from graphlab.data_structures.image import Image

from graphlab.data_structures.sgraph import load_sgraph, load_graph

from graphlab.toolkits._model import Model, CustomModel

import graphlab.aggregate
import graphlab.toolkits
import graphlab.toolkits.clustering as clustering
import graphlab.toolkits.distances as distances

from graphlab.toolkits import evaluation
import graphlab.toolkits.text_analytics as text_analytics
import graphlab.toolkits.graph_analytics as graph_analytics
import graphlab.toolkits._internal as _internal

from graphlab.toolkits.graph_analytics import connected_components
from graphlab.toolkits.graph_analytics import shortest_path
from graphlab.toolkits.graph_analytics import kcore
from graphlab.toolkits.graph_analytics import pagerank
from graphlab.toolkits.graph_analytics import graph_coloring
from graphlab.toolkits.graph_analytics import triangle_counting
from graphlab.toolkits.graph_analytics import degree_counting
from graphlab.toolkits.graph_analytics import label_propagation

import graphlab.toolkits.recommender as recommender
from graphlab.toolkits.recommender import popularity_recommender
from graphlab.toolkits.recommender import item_similarity_recommender
from graphlab.toolkits.recommender import ranking_factorization_recommender
from graphlab.toolkits.recommender import factorization_recommender

import graphlab.toolkits.data_matching as data_matching
from graphlab.toolkits.data_matching import deduplication
from graphlab.toolkits.data_matching import autotagger
from graphlab.toolkits.data_matching import record_linker
from graphlab.toolkits.data_matching import nearest_neighbor_deduplication
from graphlab.toolkits.data_matching import nearest_neighbor_autotagger
from graphlab.toolkits.data_matching import similarity_search

from graphlab.toolkits.graph_analytics import connected_components
from graphlab.toolkits.graph_analytics import shortest_path
from graphlab.toolkits.graph_analytics import kcore
from graphlab.toolkits.graph_analytics import pagerank
from graphlab.toolkits.graph_analytics import graph_coloring
from graphlab.toolkits.graph_analytics import triangle_counting
from graphlab.toolkits.graph_analytics import degree_counting
from graphlab.toolkits.graph_analytics import label_propagation

import graphlab.toolkits.regression as regression
from graphlab.toolkits.regression import boosted_trees_regression
from graphlab.toolkits.regression import random_forest_regression
from graphlab.toolkits.regression import linear_regression

import graphlab.toolkits.classifier as classifier
from graphlab.toolkits.classifier import svm_classifier
from graphlab.toolkits.classifier import logistic_classifier
from graphlab.toolkits.classifier import boosted_trees_classifier
from graphlab.toolkits.classifier import random_forest_classifier
from graphlab.toolkits.classifier import neuralnet_classifier
from graphlab.toolkits.classifier import nearest_neighbor_classifier

import graphlab.toolkits.deeplearning as deeplearning
import graphlab.toolkits.nearest_neighbors as nearest_neighbors
from graphlab.toolkits.clustering import kmeans
from graphlab.toolkits.clustering import dbscan
from graphlab.toolkits.topic_model import topic_model

import graphlab.toolkits.pattern_mining as pattern_mining
from graphlab.toolkits.pattern_mining import frequent_pattern_mining

import graphlab.toolkits.churn_predictor as churn_predictor

from graphlab.toolkits.image_analysis import image_analysis
import graphlab.toolkits.sentiment_analysis as sentiment_analysis
import graphlab.toolkits.product_sentiment as product_sentiment

import graphlab.toolkits.feature_engineering as feature_engineering
import graphlab.toolkits.model_parameter_search as model_parameter_search
import graphlab.toolkits.cross_validation as cross_validation
from graphlab.toolkits.model_parameter_search import grid_search
from graphlab.toolkits.model_parameter_search import random_search
from graphlab.toolkits.model_parameter_search import manual_search

from graphlab.toolkits.comparison import compare
from graphlab.toolkits.comparison import show_comparison


# internal util
from graphlab.connect.main import launch as _launch
from graphlab.connect.main import stop as _stop
import graphlab.connect.main as glconnect

## bring load functions to the top level
from graphlab.timeseries._timeseries import load_timeseries
from graphlab.data_structures.sframe import load_sframe, get_spark_integration_jar_path
from graphlab.toolkits._model import load_model
from graphlab.data_structures.DBConnection import connect_odbc, get_libodbc_path, set_libodbc_path

from _distributed_execution_environment import set_distributed_execution_environment, clear_distributed_execution_environment

# python egg version
__VERSION__ = '1.6.1'
version = '1.6.1'

from graphlab.version_check import get_newest_version
from graphlab.version_check import perform_version_check
from graphlab.util import get_environment_config
from graphlab.util import get_graphlab_object_type

import graphlab.canvas
from graphlab.canvas import show

from graphlab.version_info import version
from graphlab.version_info import __VERSION__


class DeprecationHelper(object):
    def __init__(self, new_target):
        self.new_target = new_target

    def _warn(self):
        import warnings
        import logging
        warnings.warn("Graph has been renamed to SGraph. The Graph class will be removed in the next release.", PendingDeprecationWarning)
        logging.warning("Graph has been renamed to SGraph. The Graph class will be removed in the next release.")

    def __call__(self, *args, **kwargs):
        self._warn()
        return self.new_target(*args, **kwargs)

    def __getattr__(self, attr):
        self._warn()
        return getattr(self.new_target, attr)

Graph = DeprecationHelper(SGraph)

perform_version_check()

################### Extension Importing ########################
import graphlab.extensions
from graphlab.extensions import ext_import

graphlab.extensions._add_meta_path()

# rewrite the extensions module
class _extensions_wrapper(object):
  def __init__(self, wrapped):
    self._wrapped = wrapped
    self.__doc__ = wrapped.__doc__

  def __getattr__(self, name):
    try:
        return getattr(self._wrapped, name)
    except:
        pass
    graphlab.connect.main.get_unity()
    return getattr(self._wrapped, name)

import sys as _sys
_sys.modules["graphlab.extensions"] = _extensions_wrapper(_sys.modules["graphlab.extensions"])
# rewrite the import
extensions = _sys.modules["graphlab.extensions"]

# track imports of graphlab
_mt._get_metric_tracker().track('import.graphlab')

from graphlab.timeseries._timeseries import TimeSeries

# backward compatibility. Otherwise old pickles will not load
_sys.modules["graphlab_util"] = graphlab.util
